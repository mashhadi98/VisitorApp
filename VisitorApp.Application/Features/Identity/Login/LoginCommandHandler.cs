using Microsoft.AspNetCore.Identity;
using OpenIddict.Abstractions;
using VisitorApp.Domain.Features.Identity.Entities;

namespace VisitorApp.Application.Features.Identity.Login;

public class LoginCommandHandler : RequestHandlerBase<LoginCommandRequest, LoginCommandResponse>
{
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly SignInManager<ApplicationUser> _signInManager;
    private readonly IOpenIddictApplicationManager _applicationManager;

    public LoginCommandHandler(
        UserManager<ApplicationUser> userManager,
        SignInManager<ApplicationUser> signInManager,
        IOpenIddictApplicationManager applicationManager)
    {
        _userManager = userManager;
        _signInManager = signInManager;
        _applicationManager = applicationManager;
    }

    public override async Task<LoginCommandResponse> Handler(LoginCommandRequest request, CancellationToken cancellationToken)
    {
        try
        {
            // Find user by email
            var user = await _userManager.FindByEmailAsync(request.Email);
            if (user == null)
            {
                return new LoginCommandResponse
                {
                    IsSuccess = false,
                    Message = "Invalid email or password"
                };
            }

            // Check if user is active
            if (!user.IsActive)
            {
                return new LoginCommandResponse
                {
                    IsSuccess = false,
                    Message = "User account is deactivated"
                };
            }

            // Verify password
            var result = await _signInManager.CheckPasswordSignInAsync(user, request.Password, true);
            if (!result.Succeeded)
            {
                if (result.IsLockedOut)
                {
                    return new LoginCommandResponse
                    {
                        IsSuccess = false,
                        Message = "Account is locked due to too many failed attempts"
                    };
                }

                return new LoginCommandResponse
                {
                    IsSuccess = false,
                    Message = "Invalid email or password"
                };
            }

            // For this simple implementation, we'll return basic info
            // In a real OAuth implementation, you'd create proper tokens here
            return new LoginCommandResponse
            {
                UserId = user.Id,
                Email = user.Email!,
                FirstName = user.FirstName,
                LastName = user.LastName,
                AccessToken = "Bearer token would be generated here", // This would be generated by OpenIddict
                RefreshToken = "Refresh token would be generated here", // This would be generated by OpenIddict
                ExpiresAt = DateTime.UtcNow.AddHours(1),
                IsSuccess = true,
                Message = "Login successful"
            };
        }
        catch (Exception ex)
        {
            return new LoginCommandResponse
            {
                IsSuccess = false,
                Message = $"An error occurred during login: {ex.Message}"
            };
        }
    }
}